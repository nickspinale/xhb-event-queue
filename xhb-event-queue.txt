-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package xhb-event-queue
@version 0.1

module Graphics.XHB.EventQueue
newtype EventQueueT m a
EventQueueT :: StateT EventQueue m a -> EventQueueT m a
[unEventQueueT] :: EventQueueT m a -> StateT EventQueue m a
runEventQueueT :: MonadX x m => EventQueueT m a -> m a
class Monad m => EventQueueCtx m
stateEventQueue :: EventQueueCtx m => (EventQueue -> (a, EventQueue)) -> m a
getEventQueue :: EventQueueCtx m => m EventQueue
getsEventQueue :: EventQueueCtx m => (EventQueue -> a) -> m a
putEventQueue :: EventQueueCtx m => EventQueue -> m ()
modifyEventQueue :: EventQueueCtx m => (EventQueue -> EventQueue) -> m ()
flushEventQueue :: (MonadX x m, EventQueueCtx m) => m ()
pollEventQueue :: (MonadX x m, EventQueueCtx m) => m (Maybe SomeEvent)
waitEventQueue :: (MonadX x m, EventQueueCtx m) => m SomeEvent
takeEventsByType :: (MonadX x m, EventQueueCtx m, Event e) => m (Seq e)
skipEventsByType :: (MonadX x m, EventQueueCtx m, Event e) => m (Maybe e)
instance Control.Monad.Trans.Class.MonadTrans Graphics.XHB.EventQueue.EventQueueT
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Graphics.XHB.EventQueue.EventQueueT m)
instance GHC.Base.Monad m => GHC.Base.Monad (Graphics.XHB.EventQueue.EventQueueT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (Graphics.XHB.EventQueue.EventQueueT m)
instance GHC.Base.Functor m => GHC.Base.Functor (Graphics.XHB.EventQueue.EventQueueT m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Graphics.XHB.EventQueue.EventQueueT m)
instance Control.Monad.Error.Class.MonadError e m => Control.Monad.Error.Class.MonadError e (Graphics.XHB.EventQueue.EventQueueT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (Graphics.XHB.EventQueue.EventQueueT m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (Graphics.XHB.EventQueue.EventQueueT m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.EventQueue.EventQueueCtx (Graphics.XHB.EventQueue.EventQueueT m)
instance (Graphics.XHB.EventQueue.EventQueueCtx m, Control.Monad.Trans.Class.MonadTrans t, GHC.Base.Monad (t m)) => Graphics.XHB.EventQueue.EventQueueCtx (t m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (Graphics.XHB.EventQueue.EventQueueT m)
